
/**
 * * 스코프
 * ? 말 그대로 범위. 함수,변수 참조될 수 있는 모든 값이 어느 정도 까지 범위
 * ? 에서 참조되는지를 나타내는 굉장히 중요한 모든 언어에서 배워야하는 기본 개념
 * ? 범위를 제대로 이해하지 못한다면 예기치 않은 곳에서 문제가 생길 수 있다.
 */

/** 
  * ! 스코프는 참조 대상 식별자를 찾아내기 위한 규칙입니다. 자바스크립트 만의 규칙으로 범위에 따른
  * ! 식별자를 구분하고 찾습니다.
 */

var glo = "global";
var glo = "glo";

function scope() {
    var glo = "function level scope : var";
    console.log(glo);
}

console.log(glo);
scope();

/** 
 * ? 자바스크립트는 식별자 이름을 중복해서 사용할 수 있다. 그러나 ES6 에서는 이런 문제를 해결하기 위해
 * ? let 변수는 중복선언을 지원하지 않는다.
 * ? 스코프는 중복선언된 식별자를 구별하기 위해 어디에서 선언되었는지에 따라 참조되는 범위를 달리해 구별하게 된다.
 * ? 함수 레벨 스코프를 가지는 var로 선언된 변수는 함수 내에서 선언된 변수는 외부에서 참조할 수 없다.
 * ? 따라서 함수 내부에서 선언된 중복 변수 glo는 외부에 아무런 영향을 끼칠 수 없는 것이다.
 * ! 스코프로 구분할 수 있으나 중복선언은 절대로 피하도록 하자. 식별자 이름은 굉장히 많다.
*/


/** 
 * * 스코프의 구분 -> 대표적인 변수로 설명
 * ? 크게 스코프를 두 가지로 나눌 수 있다.
 * 
 * ? 1. 전역 스코프
 * ? 2. 지역 스코프
*/

/** 
 * * 1. 전역 스코프 
 * ? 전역으로 선언된 변수라는 것은 블록 코드 내에 선언되지 않았다는 의미다.
 * ? 전역으로 선언되었기 때문에 어디에서든 참조할 수 있다.
 * ! 어디에서든 참조가 가능하기 때문에 값이 예기치 못하게 바뀔 수 있다. 조심하자.
*/

var damn = "hey!"; // 전역 스코프 변수

{
    var damn = "ya!"; // 블록 코드 내에 선언된 변수 
    //! var는 함수 레벨 스코프기 때문에 함수가 아닌 블록 코드 내에 선언되어도 전역 스코프가 된다.
    // TODO 함수가 아니라는 의미는 조건문,반복문 에서도 포함이다. 심지어 for문의 조건변수도 전역이다. ;;
}

console.log(damn);


let mitt = "hey!";

{
    let mit = "hey!";
}

//! console.log(mit); 참조할 수 없음 error 가 뜬다. 

// ? let은 ES6에서 나온 기존의 var 변수를 개선해 중복 선언을 막고, 함수 레벨이 아닌
// ? 블록 레벨 스코프를 통해 최소한의 범위로 참조 문제를 최대한 해결할 수 있다.

/** 
 * * 2. 지역 스코프
 * ? 전역이 아닌 지역(함수) 내에서 선언된 변수를 뜻한다. 외부에선 참조할 수 없고
 * ? 함수 레벨이나 블록 레벨이냐에 따라 다르다. 위에서 설명했듯이 var는 함수레벨 let은 블록 레벨이다.
*/

/** 
 * * 지역 스코프의 활용성
 * ? 즉시 실행 함수는(IFFE)는 말 그대로 선언되자마자 바로 실행되는 특징을 갖고 있다.
 * ? 함수 블록을 가지는 자바스크립트의 특정상 독립된 영역 내에서 충돌의 위험 없이 초기화 처리를 해야할 때 
 * ? 유용하게 사용할 수 있다.
*/

(() => {})(); //? 즉시 실행 함수 로직 

/** 
 * * 내부 함수
 * ? 함수 내에서 선언된 함수를 내부 함수라고 하고, 내부 함수는 외부 함수의 변수에 접근할 수 있지만,
 * ? 신기하게도 외부에서는 내부 함수에 접근할 순 없다.
*/

var x = 10;

function foo(){
    var x = 100;
    console.log(x); // ? 100

    function bar(){   // ? 내부함수
        x = 1000; // ? -> 외부 함수 x = 100을 재할당
        console.log(x); //? 1000
    }

    bar();
}
foo(); 
console.log(x); //? 10

// ! 식별자 중복 선언이기 때문에 같은 변수인 거 같지만 다르다. 이래서 중복 선언은 재앙이다.


/**
 * ! 렉시컬 스코프
 */