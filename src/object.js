/** 
 * * 객체
*/

/** 
 * ? 자바스크립트는 객체 기반의 언어이며, 원시타입 값을 제외한 모든 값들은
 * ? 전부 객체이다. 예를 들어 배열,정규표현식,함수가 있다.
*/

/** 
 * * 객체의 표현 방법
*/

var obj = {
    key : "value",
    print : function(text) {
        console.log(text);
    },
}

obj.print("hello"); // 객체의 프로퍼티 호출 .연산자를 사용

/** 
 * ? 객체는 키(key)와 값(value)으로 구성된 프로퍼티(property)들의 집합이다.
 * ? 프로퍼티는 특성이라는 뜻을 가지고 있다. 객체는 현실의 사물이나 사람, 추상적인 개념
 * ? 을 표현하기 위해 특성으로 정의한다.
 * ? 객체에는 자바스크립트에서 사용할 수 있는 모든 값을 사용가능하며, 함수또한 일급 객체이므로, 값처럼 사용할 수 있다.
 * ? 그러기에 위에서 처럼 함수도 값으로 사용할 수 있는데 일반적인 함수와 구분하기 위해서 "행동"을 뜻하는
 * ? 메서드로 부른다.
*/

/** 
 * TODO 객체는 데이터인 프로퍼티와 데이터를 참조하고 사용하는 행동을 의미하는 메소드로 구성된 집합이다.
 * ! 자바스크립트는 다른 언어와는 달리 클래스 상속으로 객체지향을 표현하는 거와 달리
 * ! 프로토타입 기반 상속 객체지향 언어이다. 
 * ! 다른 언어와 특징이 다르지만 자바스크립트 자체도 클래스를 지원하긴 한다.
 */


/** 
  * * 프로퍼티(특성)
  * ? 객체의 특성을 표현하는 프로퍼티는 키와 값으로 구성된다.
  * ? 키 : 값 처럼 사용하며, 프로퍼티 값을 키가 유일하게 식별할 수 있는 식별자 역할을 하게 된다.
  * ? 호출 시에도 키를 사용함.
  * ! 프로퍼티 키 : 빈 문자열을 포함한 모든 문자열과 유일한 식별값을 가지는 Symbol 값
  * ! 프로퍼티 값 : 전부. 일급 객체인 함수도 값으로 사용할 수 있다. 
 */

/** 
  * *  메서드(함수)
  * ? 일급 객체인 함수는 프로퍼티 값으로써 사용할 수 있고, 객체 내의 한정된 함수를 메서드라고 따로 명명한다.
 */

/** 
 * * 객체 생성 방법
 * ? 자바스크립트는 클래스 기반이 아니어서 다른 자바,파이썬과 다르게 클래스로 객체를 생성하지 않았다 ES6 이전까지
 * ? 아직 공부 중으로 프로토타입에 대한 개념이 명확하지 않아 공부중인 본문 그대로를 소개함. 
 * 
 * TODO ECMAScript 6에서 새롭게 클래스가 도입되었다. 프로토타입 기반 프로그래밍은 클래스가 존재하지 않는 
 * TODO 객체지향 프로그래밍 스타일이다. 클래스없이 프로토타입 체인과 클로저 등으로 객체 지향 언어의 상속, 캡슐화(정보 은닉) 등의 개념을 구현한다. 
 * TODO 하지만 클래스 기반 언어에 익숙한 프로그래머들은 혼란을 일으킬 수 있으며 자바스크립트를 어렵게 느끼게하는 하나의 장벽처럼 인식되었다. 
 * TODO ES6의 클래스는 기존 프로토타입 기반 객체지향 프로그래밍보다 클래스 기반 언어에 익숙한 프로그래머가 보다 빠르게 학습할 수 있는 단순하고 깨끗한 새로운 문법을 제시하고 있다. 
 * TODO ES6의 클래스가 새로운 객체지향 모델을 제공하는 것이 아니며 클래스도 사실 함수이고 기존 프로토타입 기반 패턴의 문법적 설탕(Syntactic sugar)이다.
 * 
 * ? 핵심은 클래스 상속을 함수를 통해 흉내낸 것이며, 기존 프로토타입 기반 패턴을 사용한다.
 * ! 문법적 설탕은 사용자가 이해하기 편하게 구조가 아닌 디자인 만을 바꾼 것이다.
 * ! 쉽게 표현되면 사용자 입장에서 달달하잖아.
*/

/** 
 * * 객체 생성 방법
 * ? 자바스크립트의 객체 생성 방법은 굉장히 간단하다. 할당 연산을 통해 {}만 넣어주면, 빈 객체의 탄생이다.
 * ? 객체를 할당할 때 초기화를 해놓는 게 일방적인 방법이다.
*/

var emptyObj = {} // 빈 객체의 탄생 언제든지 프로퍼티를 추가할 수 있다. 

emptyObj.property = 1; // 바로 이렇게

console.log(emptyObj); // 완벽

// 사람을 표현한 객체

var person = {
    name : 'Kim Jun Seo',
    gender : 'male',
    age : 23,
    distance : 0,
    walking : function() {
        distance = 10;
    } // 간단하게 걸으면 10 이동하는 단순 코딩
}