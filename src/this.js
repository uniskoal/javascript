
/** 
 * * this
 * ? 자바스크립트 함수가 호출될 때 매개변수의 인자값을 객체로 가지고 있는 arguments 객체와
 * ? 객체를 가리키는 this를 암묵적으로 전달 받습니다.
*/

/** 
 * ? 정해지지 않은 매개변수를 받아 더하는 함수
*/

function add() {
    
    var result = 0; 

    for ( data of arguments) {
        result += data;
    }

    return console.log(result);
}

add(1,4,7,5,2);

/** 
 * ? arguments 는 매개변수의 인자값을 배열처럼 작동하는 객체 형태로 저장한다.
 * ? 배열처럼 이라는 뜻은 인덱스 기능을 지원하지만 태생이 Object이기 때문에 Array.prototype의 메서드를 사용할 수 없다.
 * ? call,bind,apply 같은 함수 프로토타입을 사용할 순 있다.
*/

/** 
 * * this 바인딩 방식
 * ? 바인딩은 연결한다라는 의미로, 대표적인 사용 방식은 생성자 함수의 매개변수와 프로퍼티를 구분하기
 * ? 위함으로 자신의 객체를 가리키는 용도로 사용했다.
 * ? 자바에서 this는 단순히 자기 자신을 가리키는 참조변수로써 사용하지만, 
 * ! 자바스크립트 같은 경우에는 함수가 어떤 식으로 호출 되는지에 따라 가리키는 객체가 다르다.
 * ! 이걸 모른다? 자바 처럼 사용하다가 큰일 난다.
 * 
 * ? 저번에 공부했던 함수 정적 스코프의 경우에는 함수가 선언되었을때의 스코프를 따졌지만
 * ? 생성자,메서드,일반적인 함수, 함수 메서드인 apply,call,bind를 이용한 강제 바인딩 등
 * ? 호출 방식에 의해 this의 연결될 객체가 동적으로 결정된다. 
*/


/** 
 * * 함수의 호출 방식의 종류
 * 
 * ? 1. 일반적인 전역 함수 호출 / 내부 함수
 * ? 2. 객체의 메서드 호출
 * ? 3. 생성자 함수 호출
 * ? 4. apply,bind,call 을 통한 강제 바인딩
*/


/** 
 * * 1. 일반적인 전역 함수 호출 / 내부 함수
 * 
 * ? 여기서 전역 객체라는 뜻은 이전에서 공부했듯이 window 객체를 뜻한다.
 * ? 전역 객체의 연결된다? window 로 연결된다.
*/

var extend = function() {
    console.dir(this); // ? global 객체를 가지고 있는걸 알 수 있다. node같은 경우는 global 브라우저에서는 window 로 작동한다.
} 

extend();


/** 
 * * 2. 메서드 호출 
 * 
 * ? 객체 내에서의 메서드 호출또한 자기 자신의 객체를 가리킵니다. 
*/

/** 
 * * 3. 생성자 함수 호출
 * ? 객체에서 작동하는 this는 다른 객체지향과 동일하게 자기 자신의 객체를 가리킵니다. 
*/
